{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","handleOpenTodo","selectedTodo","className","map","todo","id","title","completed","type","onClick","TodoFilter","query","setQuery","setTodosCategory","onChange","event","target","value","defaultValue","placeholder","style","pointerEvents","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","a","fetch","response","json","userId","TodoModal","handleCloseTodo","useState","user","setUser","isLoading","setIsLoading","useEffect","getUser","then","catch","error","message","finally","href","email","name","App","setTodos","visibleTodos","setVisibleTodos","openedTodo","setOpenedTodo","todoCategory","getTodos","fetchedTodos","currentCategory","filter","toLowerCase","includes","toggleTodoModal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db055ca9.chunk.js","sourcesContent":["import { Todo } from '../../types/Todo';\n\ninterface TodoListProps {\n  todos: Todo[],\n  handleOpenTodo: (value: Todo) => void,\n  selectedTodo: Todo | null,\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos,\n  handleOpenTodo = () => { },\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr data-cy=\"todo\" className=\"\" key={id}>\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleOpenTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={`fas ${selectedTodo?.id === id ? 'fa-eye-slash' : 'fa-eye'}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","interface TodoFilterProps {\n  query: string,\n  setQuery: (value: string) => void\n  setTodosCategory: (value: string) => void\n}\n\nexport const TodoFilter = ({\n  query,\n  setQuery = () => { },\n  setTodosCategory = () => { },\n}: TodoFilterProps) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setTodosCategory(event.target.value)}\n            defaultValue=\"all\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport async function getTodos() {\n  await wait(1000);\n  const response = await fetch(`${BASE_URL}/todos.json`);\n  const todos = response.json();\n\n  return todos;\n}\n\nexport async function getUser(userId: number) {\n  await wait(1000);\n  const response = await fetch(`${BASE_URL}/users/${userId}.json`);\n  const todos = response.json();\n\n  return todos;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\nimport { getUser } from '../../api';\n\ninterface TodoModalProps {\n  todo: Todo,\n  handleCloseTodo: (value: Todo | null) => void\n}\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  todo,\n  handleCloseTodo = () => { },\n}) => {\n  const [user, setUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const {\n    title, id, userId, completed,\n  } = todo;\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(userId)\n      .then((setUser))\n      .catch((error) => error.message)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className={`modal ${todo && 'is-active'}`} data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? (\n          <Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={\n                  () => handleCloseTodo(null)\n                }\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                <strong className={completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {completed ? 'Done' : 'Planned'}\n                </strong>\n                {' by '}\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\n\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n  const [isLoading, setIsLoading] = useState(true);\n  const [openedTodo, setOpenedTodo] = useState<null | Todo>(null);\n  const [query, setQuery] = useState('');\n  const [todoCategory, setTodosCategory] = useState('all');\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then((fetchedTodos) => {\n        setTodos(fetchedTodos);\n        setVisibleTodos(fetchedTodos);\n      })\n      .catch((error) => error.message)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    let currentCategory: boolean | null;\n\n    if (todoCategory === 'completed') {\n      currentCategory = false;\n    } else if (todoCategory === 'active') {\n      currentCategory = true;\n    } else {\n      currentCategory = null;\n    }\n\n    setVisibleTodos(todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n      && todo.completed !== currentCategory\n    )));\n  }, [query, todoCategory]);\n\n  const toggleTodoModal = (todo: null | Todo) => {\n    if (openedTodo) {\n      setOpenedTodo(null);\n    } else {\n      setOpenedTodo(todo);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setTodosCategory={setTodosCategory}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    handleOpenTodo={toggleTodoModal}\n                    selectedTodo={openedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {openedTodo && <TodoModal todo={openedTodo} handleCloseTodo={toggleTodoModal} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}